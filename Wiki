<h3><strong>Welcome to the OOPProject1 wiki!</strong></h3>
<img src="https://mcshowblog.files.wordpress.com/2019/08/dumpsterfire.jpg?w=640&h=404" alt="" />
<p>
 Instructions
You should be choosing the project that you are going to work on soon.
If we think about the steps you should be dealing with, you have the
requirements phase in which you should be writing a description of
the project you are working on. The requirements document is not a
technical definition of the project; it is an overview of the
application. This document should be understandable by anyone. You
should be describing the application the way that we discussed in the
class; a document well enough so that we can analyze the uses of the
system.
<p/>
<p>
Second phase is the design phase in which you actually design your
system by using UML diagrams, such as use case diagrams and class
diagrams (these two are required, others like activity diagrams will
earn you some bonus points). To draw these, you can use ArgoUML,
Microsoft Visio, Omni Graffle, etc. When you are preparing your design
document you can use Word or PDF and it should be formal and detailed
enough. The requirements document should be included as well. This
document serves as a documentation, so any details on how the
application is used should be included.
<p/>
<p>
Last phase is the actual implementation of the project. It is a good
idea to divide these tasks between yourselves and try to deal with
different parts of the system.
Once the teams are certain, you will be added to Trello groups to
collaborate. I will be tracking your contribution to the project and
will grade you individually accordingly. Make sure to show how you
contribute, post as much as possible (actual content as you design &
implement).
<p/>
I am expecting you to prepare:<br/>
• Documentation (A single unified document (Word or PDF), including
requirements document, diagrams, any other application specific
details you may need to include) <br/>
• Implementation (Java project)<br/>
<p>
Example projects:
 - A Java game which can demonstrate the use of classes,
 polymorphism, exception handling and various states within
 the application.
 - A system for a library, pharmacy, store (like HEB, Walmart),
 office, fitness center, etc. (Lots of possibilities here)
 - A management application for employees, courses, reservations,
 rentals, etc.
 - Basically anything that is complex enough so you can create
 requirements/design documents and you can demonstrate all
 the OOP concepts that we discussed. You are free to pick
 any complex project.
</p>
<p>
Some required components:
-Exception Handling
-GUI
-Proper class hierarchy (inheritance/polymorphism/composition),
Interfaces
-Threading (If needed)
</p>
